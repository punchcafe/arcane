/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package die.cafe;

import die.cafe.instantiate.InstanceGenerator;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;

public class App {

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        // TODO: refactor tyo use class path here
        String dirName = ".";

        ClassFinder finder = new ClassFinder();

        List<String> classStrings;

        try {
            classStrings = finder.classFinder(dirName);
        } catch (IOException e) {
            e.printStackTrace();
            classStrings = List.of();
        }

        List<Class> classes = new ArrayList<>();

        for (String className : classStrings) {
            try {
                var clazz = Class.forName(className);
                if(clazz.getAnnotations().length > 0) {
                    // TODO: change to match @SpellbookPage
                    classes.add(clazz);
                }
                final var annotations = Class.forName(className).getAnnotations();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }
        /// all the magic is here
        //TODO: extract to instance generator class
        HashMap<Class<?>, List<Class<?>>> dependencyMapForGenerator = new HashMap<>();

        for (Class clazz : classes) {
            if(clazz.getConstructors().length == 0){
                // TODO: consider Behaviour
                continue;
            }
            // Currently assumes one constructor.
            dependencyMapForGenerator.put(clazz, List.of(clazz.getConstructors()[0].getParameterTypes()));
        }

        Map<Class<?>, Object> objectCache = new HashMap<>();

        for (Class clazz : classes) {
            if(objectCache.get(clazz) == null && !clazz.isInterface()) {
                objectCache.put(clazz,(new InstanceGenerator(clazz, dependencyMapForGenerator, objectCache)).generate());
            }
        }
        System.out.println("For break point");
    }
}


class ClassFinder {
    public List<String> classFinder(String root) throws IOException {
        List<String> classes = new ArrayList<>();
        Set<Path> paths = Files.list(new File(root).toPath()).collect(Collectors.toSet());
        for (Path p : paths) {
            if ((new File(p.toString())).isDirectory()) {
                classes.addAll(classFinder(p.toString()));
            } else {
                if (p.toString().endsWith(".java")) {
                    classes.add(getFullClassName(p.toString()));
                }
            }
            System.out.println(p.toString());
        }
        return classes;
    }

    private String getFullClassName(String javaFilePath) throws IOException {
        File file = new File(javaFilePath);

        BufferedReader br = new BufferedReader(new FileReader(file));
        String st;
        st = br.readLine();
        while (!st.contains("package")) {
            st = br.readLine();
            if (st == null) {
                return null;
            }
        }
        String packageName = st.trim().substring(8, st.length() - 1);
        String className = file.getName().substring(0, file.getName().length() - 5);
        return (new StringBuilder()).append(packageName).append(".").append(className).toString();
    }
}

