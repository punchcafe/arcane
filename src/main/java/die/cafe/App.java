/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package die.cafe;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;

public class App {

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        String dirName = ".";

        ClassFinder finder = new ClassFinder();

        List<String> classStrings;

        try {
            classStrings = finder.classFinder(dirName);
        } catch (IOException e) {
            e.printStackTrace();
            classStrings = List.of();
        }
        List<Class> classes = new ArrayList<>();

        for(String className : classStrings){
            try {
                classes.add(Class.forName(className));
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }
        HashMap<Class, Class[]>dependencyTree = new HashMap<>();
        for(Class clazz: classes){
            dependencyTree.put(clazz, clazz.getConstructors()[0].getParameterTypes());
        }
        DependencyTree internalTree = new DependencyTree();
        System.out.println(classes);
        internalTree.resolve(dependencyTree);
        System.out.println("did it work?");

    }
}

class DependencyTree{
    private Map<Class<?>,ClassDependency> internalMap = new HashMap<>();
    private boolean resolved = false;

    public void resolve(Map<Class, Class[]> rawMap){
        Map<Class<?>,ClassDependency> candidate = new HashMap<>();
        for(Class clazz : rawMap.keySet()){
            candidate.put(clazz, recursiveResolver(clazz, rawMap));
        }
        internalMap = candidate;
        resolved = true;
    }

    public ClassDependency recursiveResolver(Class clazz, Map<Class, Class[]> rawMap){
        Class[] dependenciesArray = rawMap.get(clazz);
        if(rawMap.get(clazz).length == 0){
            return new ClassDependency(clazz, Set.of());
        }
        Set<ClassDependency> dependencies = new HashSet<>();
        for(Class iteratingClass : dependenciesArray){
            dependencies.add(recursiveResolver(iteratingClass, rawMap));
        }
        return new ClassDependency(clazz, dependencies);
    }


}

class ClassDependency{
    final Class<?> clazz;
    final Set<ClassDependency> dependencies;

    @Override
    public boolean equals(Object object){
        if(object instanceof ClassDependency){
            clazz.equals(((ClassDependency) object).getClazz());
        }
        return false;
    }

    public ClassDependency(Class<?> clazz, Set<ClassDependency> dependencies){
        this.clazz = clazz;
        this.dependencies = dependencies;
    }

    public Class<?> getClazz() {
        return this.clazz;
    }

    public Set<ClassDependency> getDependencies() {
        return this.dependencies;
    }

    public boolean isLeaf(){
        return dependencies.size() == 0;
    }

    public boolean isBranch(){
        return dependencies.size() != 0;
    }

}

class ClassFinder {
    public List<String> classFinder (String root) throws IOException{
        List<String> classes = new ArrayList<>();
        Set<Path> paths = Files.list(new File(root).toPath()).collect(Collectors.toSet());
        for(Path p : paths){
            if((new File(p.toString())).isDirectory()){
                classes.addAll(classFinder(p.toString()));
            } else {
                if(p.toString().endsWith(".java")){
                    classes.add(getFullClassName(p.toString()));
                }
            }
            System.out.println(p.toString());
        }
        return classes;
    }

    private String getFullClassName(String javaFilePath) throws IOException{
        File file = new File(javaFilePath);

        BufferedReader br = new BufferedReader(new FileReader(file));
        String st;
        st = br.readLine();
        while(!st.contains("package")){
            st = br.readLine();
            if(st == null){ return null;}
        }
        String packageName = st.trim().substring(8,st.length()-1);
        String className = file.getName().substring(0,file.getName().length()-5);
        return (new StringBuilder()).append(packageName).append(".").append(className).toString();
    }
}

